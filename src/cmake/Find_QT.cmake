# Find Qt
MACRO( FindQt )
    SET( Qt_FOUND false )
    IF ( DEFINED QT_VERSION )
        SET( QtVersion ${QT_VERSION} )
    ELSEIF ( NOT DEFINED QtVersion )
        SET( QtVersion -1 )
    ENDIF()
    # Check for Qt4
    IF ( ("${QtVersion}" STREQUAL "4") OR ("${QtVersion}" STREQUAL "-1") )
        SET( QT_USE_FILE )
        SET( QT_INCLUDES )
        SET( QT_LIBRARIES )
        FIND_PACKAGE( Qt4 COMPONENTS QtCore QUIET )
        IF ( NOT Qt4_FOUND )
            MESSAGE( "-- Qt4 not found" )
        ENDIF()
    ENDIF()
    IF ( Qt4_FOUND )
        # Search for all required qt components
        SET( Qt4_FOUND false )
        SET( Qt4_Components QtCore QtGui QtSql QtSvg QtOpenGL QUIET )

        FIND_PACKAGE( Qt4 COMPONENTS ${Qt4_Components} )
        IF ( Qt4_FOUND )
            SET( QtVersion 4 )
            SET( Qt_FOUND true )
            MESSAGE( "-- Qt4 found" )
        ELSE()
            # Qt4 found, but it is missing components
            MESSAGE( "Qt4 found but missing key components:" )
            FOREACH( test ${Qt4_Components} )
                FIND_PACKAGE( Qt4_${test} COMPONENTS ${test} QUIET )
                IF ( NOT Qt4_${test} )
                    MESSAGE( "  ${test}" )
                ENDIF()
            ENDFOREACH()
        ENDIF()
    ENDIF()
    # Check for Qt5
    IF ( ("${QtVersion}" STREQUAL "5") OR ("${QtVersion}" STREQUAL "-1") )
        SET( QT_USE_FILE )
        SET( QT_INCLUDES )
        SET( QT_LIBRARIES )
        QT5_FIND_PATH()
        IF ( NOT QT5_FOUND_PATH )
            MESSAGE( "-- Qt5 not found" )
        ENDIF()
    ENDIF()
    IF ( QT5_FOUND_PATH )
        MESSAGE( "-- Qt5 found" )
        SET( CMAKE_AUTOMOC ON )
        SET( CMAKE_AUTORCC ON )
        SET( CMAKE_PREFIX_PATH "${QT5_PATH}" )
        FIND_PACKAGE( Qt5Core QUIET )
        SET( QT5_COMPONENTS Core Widgets Gui Sql OpenGL Concurrent PrintSupport Svg )
        SET( Qt5_FOUND true PARENT_SCOPE )
        FOREACH( test ${QT5_COMPONENTS} )
            STRING(TOUPPER "${test}" TEST)
            SET( CMAKE_PREFIX_PATH "${Qt5Core_DIR}/.." )
            FIND_PACKAGE( Qt5${test} QUIET )
            IF ( NOT Qt5${test}_FOUND )
                SET( Qt5_FOUND false PARENT_SCOPE )
                MESSAGE( "  Missing Qt5${test}" )
            ELSE()
                SET( QT_LIBRARIES ${QT_LIBRARIES} ${Qt5${test}_LIBRARIES} )
                IF ( Qt5${test}_INCLUDE_DIRS )
                    SET( QT_INCLUDES ${QT_INCLUDES} "${Qt5${test}_INCLUDE_DIRS}" )
                ELSEIF ( QT_QT${TEST}_INCLUDE_DIR )
                    SET( QT_INCLUDES ${QT_INCLUDES} "${QT_QT${TEST}_INCLUDE_DIR}" )
                ENDIF()
            ENDIF()
        ENDFOREACH()
        FOREACH( test ${QT5_OPTIONAL_COMPONENTS} )
            STRING(TOUPPER "${test}" TEST)
            SET( CMAKE_PREFIX_PATH "${Qt5Core_DIR}/.." )
            FIND_PACKAGE( Qt5${test} QUIET )
            IF ( Qt5${test}_FOUND )
                SET( QT_LIBRARIES ${QT_LIBRARIES} ${Qt5${test}_LIBRARIES} )
                IF ( Qt5${test}_INCLUDE_DIRS )
                    SET( QT_INCLUDES ${QT_INCLUDES} "${Qt5${test}_INCLUDE_DIRS}" )
                ELSEIF ( QT_QT${TEST}_INCLUDE_DIR )
                    SET( QT_INCLUDES ${QT_INCLUDES} "${QT_QT${TEST}_INCLUDE_DIR}" )
                ELSE()
                    SET( QT_INCLUDES ${QT_INCLUDES} "${QT_ROOT_INCLUDE}/Qt${test}" )
                ENDIF()
            ENDIF()
        ENDFOREACH()
        LIST( REMOVE_DUPLICATES QT_INCLUDES )
        FIND_PACKAGE( Qt5 COMPONENTS ${QT5_COMPONENTS} QUIET )
        IF ( Qt5_FOUND )
            SET( QtVersion 5 )
            SET( Qt_FOUND true )
        ENDIF()
    ENDIF()
ENDMACRO()


# Find Qt5 path
MACRO( QT5_FIND_PATH )
    SET( QT5_FOUND_PATH false )
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_AUTOMOC ON)
    FIND_PACKAGE(Qt5Core QUIET)
    IF ( Qt5Core_FOUND )
        SET( QT5_FOUND_PATH true )
    ELSE()
        SET( SEARCH_PATHS "C:\\Qt\\5.5\\msvc2013_64 ")
        FOREACH( test ${SEARCH_PATHS} )
            SET( CMAKE_PREFIX_PATH "${test}" )
            FIND_PACKAGE(Qt5Core QUIET)
            IF ( Qt5Core_FOUND )
                SET( QT5_FOUND_PATH true )
                SET( QT5_PATH "${test}" )
            ENDIF()
        ENDFOREACH()
    ENDIF()
ENDMACRO()


# Add Qt resources
FUNCTION( QT_ADD_RESOURCES var ${ARGN} )
    IF ( NOT QtVersion )
        MESSAGE(FATAL_ERROR "QtVersion must be set")
    ELSEIF ( "${QtVersion}" STREQUAL "4" )
        # Using AUTORCC
        QT4_ADD_RESOURCES( tmp ${ARGN} )
        SET( ${var} ${tmp} PARENT_SCOPE )
    ELSEIF ( "${QtVersion}" STREQUAL "5" )
        SET( ${var} ${ARGN} PARENT_SCOPE )
    ELSE()
        MESSAGE(FATAL_ERROR "QtVersion ${QtVersion} is not known")
    ENDIF()
ENDFUNCTION()


# Add Qt cpp files
FUNCTION( QT_WRAP_CPP var ${ARGN} )
    IF ( NOT QtVersion )
        MESSAGE(FATAL_ERROR "QtVersion must be set")
    ELSEIF ( "${QtVersion}" STREQUAL "4" )
        QT4_WRAP_CPP( tmp ${ARGN} )
        SET( ${var} ${tmp} PARENT_SCOPE )
    ELSEIF ( "${QtVersion}" STREQUAL "5" )
        # Using AUTOMOC
        SET( ${var} PARENT_SCOPE )
    ELSE()
        MESSAGE(FATAL_ERROR "QtVersion ${QtVersion} is not known")
    ENDIF()
ENDFUNCTION()


