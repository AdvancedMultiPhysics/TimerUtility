# Find Qt
MACRO( FindQt )
    SET( Qt_FOUND false )
    # Check for Qt4
    FIND_PACKAGE( Qt4 COMPONENTS QtCore QUIET )
    IF ( Qt4_FOUND )
        # Search for all required qt components
        SET( Qt4_FOUND false )
        SET( Qt4_Components QtCore QtGui QtSql QtSvg QtOpenGL QUIET )
        SET( QT_USE_FILE )
        SET( QT_INCLUDES )
        SET( QT_LIBRARIES )
        FIND_PACKAGE( Qt4 COMPONENTS ${Qt4_Components} )
        IF ( Qt4_FOUND )
            SET( QtVersion 4 )
            SET( Qt_FOUND true )
            MESSAGE( "-- Qt4 found" )
        ELSE()
            # Qt4 found, but it is missing components
            MESSAGE( "Qt4 found but missing key components:" )
            FOREACH( test ${Qt4_Components} )
                FIND_PACKAGE( Qt4_${test} COMPONENTS ${test} QUIET )
                IF ( NOT Qt4_${test} )
                    MESSAGE( "  ${test}" )
                ENDIF()
            ENDFOREACH()
        ENDIF()
    ELSE()
        MESSAGE( "-- Qt4 not found" )
    ENDIF()
    # Check for Qt5
    IF ( NOT Qt_FOUND )
        SET( QT_USE_FILE )
        SET( QT_INCLUDES )
        SET( QT_LIBRARIES )
        QT5_FIND_PATH()
    ENDIF()
    IF ( QT5_FOUND_PATH )
        MESSAGE( "-- Qt5 found" )
        SET( CMAKE_AUTOMOC ON )
        SET( CMAKE_AUTORCC ON )
        SET( CMAKE_PREFIX_PATH "${QT5_PATH}" )
        FIND_PACKAGE( Qt5Core QUIET )
        SET( QT5_COMPONENTS Core Widgets Gui Sql OpenGL Concurrent PrintSupport Svg )
        SET( QT_ROOT_INCLUDE "${Qt5Core_DIR}/../../../include" )
        VERIFY_PATH( "${QT_ROOT_INCLUDE}" )
        SET( Qt5_FOUND true PARENT_SCOPE )
        FOREACH( test ${QT5_COMPONENTS} )
            SET( CMAKE_PREFIX_PATH "${Qt5Core_DIR}/.." )
            FIND_PACKAGE( Qt5${test} QUIET )
            IF ( NOT Qt5${test}_FOUND )
                SET( Qt5_FOUND false PARENT_SCOPE )
                MESSAGE( "  Missing Qt5${test}" )
            ELSE()
                SET( QT_LIBRARIES ${QT_LIBRARIES} ${Qt5${test}_LIBRARIES} )
                IF ( Qt5${test}_INCLUDE_DIRS )
                    SET( QT_INCLUDES ${QT_INCLUDES} "${Qt5${test}_INCLUDE_DIRS}" )
                ELSE()
                    SET( QT_INCLUDES ${QT_INCLUDES} "${QT_ROOT_INCLUDE}/Qt${test}" )
                ENDIF()
            ENDIF()
        ENDFOREACH()
        LIST( REMOVE_DUPLICATES QT_INCLUDES )
        FIND_PACKAGE( Qt5 COMPONENTS ${QT5_COMPONENTS} QUIET )
        IF ( Qt5_FOUND )
            SET( QtVersion 5 )
            SET( Qt_FOUND true )
        ENDIF()
    ELSE()
        MESSAGE( "-- Qt5 not found" )
    ENDIF()
ENDMACRO()


# Find Qt5 path
FUNCTION( QT5_FIND_PATH )
    SET( QT5_FOUND_PATH false PARENT_SCOPE )
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set(CMAKE_AUTOMOC ON)
    FIND_PACKAGE(Qt5Core QUIET)
    IF ( Qt5Core_FOUND )
        SET( QT5_FOUND_PATH true PARENT_SCOPE )
    ELSE()
        SET( SEARCH_PATHS "C:\\Qt\\5.5\\msvc2013_64 ")
        FOREACH( test ${SEARCH_PATHS} )
            SET( CMAKE_PREFIX_PATH "${test}" )
            FIND_PACKAGE(Qt5Core QUIET)
            IF ( Qt5Core_FOUND )
                SET( QT5_FOUND_PATH true PARENT_SCOPE )
                SET( QT5_PATH "${test}" PARENT_SCOPE )
            ENDIF()
        ENDFOREACH()
    ENDIF()
ENDFUNCTION()


# Add Qt resources
MACRO( QT_ADD_RESOURCES QtApp_RCC_SRCS QtApp_RCCS )
    IF ( NOT QtVersion )
        MESSAGE(FATAL_ERROR "QtVersion must be set")
    ELSEIF ( "${QtVersion}" STREQUAL "4" )
        # Using AUTORCC
        QT4_ADD_RESOURCES(${QtApp_RCC_SRCS} ${QtApp_RCCS})
    ELSEIF ( "${QtVersion}" STREQUAL "5" )
        SET( ${QtApp_RCC_SRCS} ${QtApp_RCCS})
    ELSE()
        MESSAGE(FATAL_ERROR "QtVersion ${QtVersion} is not known")
    ENDIF()
ENDMACRO()


# Add Qt cpp files
MACRO( QT_WRAP_CPP QtApp_MOC_SRCS QtApp_MOCS )
    IF ( NOT QtVersion )
        MESSAGE(FATAL_ERROR "QtVersion must be set")
    ELSEIF ( "${QtVersion}" STREQUAL "4" )
        QT4_WRAP_CPP(${QtApp_MOC_SRCS} ${QtApp_MOCS})
    ELSEIF ( "${QtVersion}" STREQUAL "5" )
        # Using AUTOMOC
    ELSE()
        MESSAGE(FATAL_ERROR "QtVersion ${QtVersion} is not known")
    ENDIF()
ENDMACRO()


