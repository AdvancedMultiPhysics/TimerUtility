# Find Qt
MACRO( FindQt )
    SET( Qt_FOUND false )
    IF ( DEFINED QT_VERSION )
        SET( QtVersion ${QT_VERSION} )
    ELSEIF ( NOT DEFINED QtVersion )
        SET( QtVersion -1 )
    ENDIF()
    # Check for Qt4
    IF ( ("${QtVersion}" STREQUAL "4") OR ("${QtVersion}" STREQUAL "-1") )
        SET( QT4_SEARCH_PATHS )
        SET( QT4_REQUIRED_COMPONENTS Core Gui Sql Svg OpenGL )
        SET( QT4_OPTIONAL_COMPONENTS )
        FIND_QT_VERSION( 4 )
        IF ( QT4_FOUND )
            SET( Qt_FOUND true )
            SET( QtVersion 4 )
            SET( QT_INCLUDES ${QT4_INCLUDES} )
            SET( QT_LIBRARIES ${QT4_LIBRARIES} )
            MESSAGE("   QT_INCLUDES=${QT_INCLUDES}")
            MESSAGE("   QT_LIBRARIES=${QT_LIBRARIES}")
        ELSE()
            QT_CLEAR( 4 )
        ENDIF()
    ENDIF()
    # Check for Qt5
    IF ( ("${QtVersion}" STREQUAL "5") OR ("${QtVersion}" STREQUAL "-1") )
        SET( QT5_SEARCH_PATHS "C:\\Qt\\5.5\\msvc2013_64" )
        SET( QT5_REQUIRED_COMPONENTS Core Widgets Gui Sql OpenGL Concurrent PrintSupport Svg )
        SET( QT5_OPTIONAL_COMPONENTS )
        SET( CMAKE_AUTOMOC ON )
        SET( CMAKE_AUTORCC ON )
        FIND_QT_VERSION( 5 )
        IF ( QT5_FOUND )
            SET( Qt_FOUND true )
            SET( QtVersion 5 )
            SET( QT_INCLUDES ${QT5_INCLUDES} )
            SET( QT_LIBRARIES ${QT5_LIBRARIES} )
            MESSAGE("   QT_INCLUDES=${QT_INCLUDES}")
            MESSAGE("   QT_LIBRARIES=${QT_LIBRARIES}")
        ELSE()
            QT_CLEAR( 5 )
        ENDIF()
    ENDIF()
ENDMACRO()


# Find a specific version of Qt
MACRO( FIND_QT_VERSION VERSION )
    SET( QT${VERSION}_INCLUDES )
    SET( QT${VERSION}_LIBRARIES )
    SET( SEARCH_PATHS "null_path" ${QT${VERSION}_SEARCH_PATHS} )
    SET( REQUIRED_COMPONENTS ${QT${VERSION}_REQUIRED_COMPONENTS} )
    SET( OPTIONAL_COMPONENTS ${QT${VERSION}_OPTIONAL_COMPONENTS} )
    SET( QT${VERSION}_FOUND false )
    FOREACH ( path2 ${SEARCH_PATHS} )
        IF ( NOT QT${VERSION}_FOUND )
            IF ( "${path}" STREQUAL "null_path" )
                SET( CMAKE_PREFIX_PATH )
            ELSE()
                SET( CMAKE_PREFIX_PATH "${path2}" )
            ENDIF()
            FIND_QT_PACKAGE( ${VERSION} Core )
            IF ( QT${VERSION}Core_FOUND )
                SET( QT${VERSION}_FOUND true )
                MESSAGE( "-- Qt${VERSION} found" )
                SET( QT${VERSION}_INCLUDES   ${QT_HEADERS_DIR} )
                SET( FOUND_ALL_QT_PACKAGES true )
                FOREACH( test ${REQUIRED_COMPONENTS} )
                    FIND_QT_PACKAGE( ${VERSION} ${test} )
                    IF ( NOT QT${VERSION}${test}_FOUND )
                        SET( FOUND_ALL_QT_PACKAGES false )
                        MESSAGE( "   Missing Qt${VERSION}${test}" )
                    ELSE()
                        SET( QT${VERSION}_LIBRARIES  ${QT${VERSION}_LIBRARIES}  ${QT${VERSION}${test}_LIBRARIES}    )
                        SET( QT${VERSION}_INCLUDES   ${QT${VERSION}_INCLUDES}   ${QT${VERSION}${test}_INCLUDE_DIRS} )
                    ENDIF()
                ENDFOREACH()
                FOREACH( test ${OPTIONAL_COMPONENTS} )
                    FIND_QT_PACKAGE( ${VERSION} ${test} )
                    IF ( Qt5${test}_FOUND )
                        SET( QT${VERSION}_LIBRARIES  ${QT${VERSION}_LIBRARIES}  ${QT${VERSION}${test}_LIBRARIES}     )
                        SET( QT${VERSION}_INCLUDES   ${QT${VERSION}_INCLUDES}   ${QT${VERSION}${test}_INCLUDE_DIRS}} )
                    ENDIF()
                ENDFOREACH()
                IF ( NOT FOUND_ALL_QT_PACKAGES )
                    SET( QT${VERSION}_FOUND false )
                ENDIF()
            ENDIF()
        ENDIF()
    ENDFOREACH()
    IF ( QT${VERSION}_INCLUDES )
        LIST( REMOVE_DUPLICATES QT${VERSION}_INCLUDES )
    ENDIF()
ENDMACRO()
MACRO( FIND_QT_PACKAGE VERSION Package )
    STRING(TOUPPER "${Package}" PACKAGE)
    IF ( "${VERSION}" STREQUAL "4" )
        FIND_PACKAGE(  Qt4 COMPONENTS Qt${Package} QUIET )
        SET( QT4${Package}_FOUND ${Qt4_FOUND} )
        SET( QT4${Package}_LIBRARIES    ${QT_QT${PACKAGE}_LIBRARIES} )
        SET( QT4${Package}_INCLUDE_DIRS ${QT_QT${PACKAGE}_INCLUDE_DIR} )
    ELSEIF ( "${VERSION}" STREQUAL "5" )
        FIND_PACKAGE( Qt5${Package} QUIET)
        SET( QT5${Package}_FOUND ${Qt5${Package}_FOUND} )
        SET( QT5${Package}_LIBRARIES ${Qt5${Package}_LIBRARIES} )
        IF ( Qt5${Package}_INCLUDE_DIRS )
            SET( QT5${Package}_INCLUDE_DIRS ${QT_INCLUDES} "${Qt5${Package}_INCLUDE_DIRS}" )
        ELSEIF ( QT_QT${PACKAGE}_INCLUDE_DIR )
            SET( QT5${Package}_INCLUDE_DIRS ${QT_INCLUDES} "${QT_QT${PACKAGE}_INCLUDE_DIR}" )
        ENDIF()
    ELSE()
        MESSAGE(FATAL_ERROR "VERSION ${VERSION} is not known")
    ENDIF()
ENDMACRO()


# Clear all QT variables
MACRO( QT_CLEAR )
    get_cmake_property(_vars VARIABLES)
    string (REGEX MATCHALL "(^|;)QT_[A-Za-z0-9_]*" _matchedVars "${_vars}")
    set (${_varResult} ${_matchedVars} PARENT_SCOPE)
    foreach (_variableName ${_matchedVars})
        SET( ${_variableName} )
        MESSAGE("${_variableName}=${${_variableName}}")
    endforeach()
ENDMACRO()


# Add Qt resources
FUNCTION( QT_ADD_RESOURCES var ${ARGN} )
    IF ( NOT QtVersion )
        MESSAGE(FATAL_ERROR "QtVersion must be set")
    ELSEIF ( "${QtVersion}" STREQUAL "4" )
        QT4_ADD_RESOURCES( tmp ${ARGN} )
        SET( ${var} ${tmp} PARENT_SCOPE )
    ELSEIF ( "${QtVersion}" STREQUAL "5" )
        # Using AUTORCC
        SET( ${var} ${ARGN} PARENT_SCOPE )
    ELSE()
        MESSAGE(FATAL_ERROR "QtVersion ${QtVersion} is not known")
    ENDIF()
ENDFUNCTION()


# Add Qt cpp files
FUNCTION( QT_WRAP_CPP var ${ARGN} )
    IF ( NOT QtVersion )
        MESSAGE(FATAL_ERROR "QtVersion must be set")
    ELSEIF ( "${QtVersion}" STREQUAL "4" )
        QT4_WRAP_CPP( tmp ${ARGN} )
        SET( ${var} ${tmp} PARENT_SCOPE )
    ELSEIF ( "${QtVersion}" STREQUAL "5" )
        # Using AUTOMOC
        SET( ${var} PARENT_SCOPE )
    ELSE()
        MESSAGE(FATAL_ERROR "QtVersion ${QtVersion} is not known")
    ENDIF()
ENDFUNCTION()


